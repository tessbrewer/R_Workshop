SEQ0062_SEQ0063_both_dorado_models_tRNA_read_counts_071024 <- read.delim("~/Methylation project/data/SEQ0062_SEQ0063_both_dorado_models_tRNA_read_counts_071024.txt")
View(SEQ0062_SEQ0063_both_dorado_models_tRNA_read_counts_071024)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
View(SEQ0062_SEQ0063_both_dorado_models_tRNA_read_counts_071024)
df = SEQ0062_SEQ0063_both_dorado_models_tRNA_read_counts_071024
sub1 = df[["gene_symbol", "hac_mod_reads", "sup_model_reads"]]
sub1
sub1 = df["gene_symbol", "hac_mod_reads", "sup_model_reads"]
sub1 = df[c(1, 3, 8),]
sub1
sub1 = df[,c(1, 3, 8)]
sub1
install.packages("tidyr")
library(tidyr)
graph = pivot_longer(sub1, names_to = "model", values_to = "count")
sub1 %>% pivot_longer(!gene_symbol, names_to = "model", values_to = "count")
graph
graph = sub1 %>% pivot_longer(!gene_symbol, names_to = "model", values_to = "count")
graph
ggplot(graph, aes(gene_symbol, fill = model)) +
ggplot(graph, aes(gene_symbol, fill = model)) +
sub1 = df[,c(1, 3, 8)]
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5) +
theme_classic(base_size = 22)
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5) +
theme_classic(base_size = 22)
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5) +
theme_classic(base_size = 22) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme(axis.text.x = element_text(angle = 50, hjust = 1))
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5, position = "dodge") +
theme_classic(base_size = 22) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_classic(base_size = 22) +
theme(axis.text.x = element_text(angle = 50, hjust = 1))
version
R.home("bin")
library(ggplot2)
graph
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5, position = "dodge") +
R.home("bin")
sub1
#subset to get only values from the hac model and add a column with the model name
sub1 = df[, c(1, 3)]
sub1["model"] = "hac"
#subset to get only values from the sup model and add a column with the model name
sub2 = df[, c(1, 8)]
sub2["model"] = "sup"
#rename the columns so they match between the two dfs
colnames(sub1) = c("gene_symbol", "count", "model")
colnames(sub2) = c("gene_symbol", "count", "model")
#combine the dfs
graph = rbind(sub1, sub2)
graph
sorted = sub2[order(-sub2$count), ]
sorted
graph$gene_symbol <- factor(graph$gene_symbol, levels=sorted$gene_symbol)
library(ggplot2)
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5, position = "dodge") +
theme_classic(base_size = 22) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_classic(base_size = 22) +
theme(axis.text.x = element_text(angle = 50, hjust = 1))
graph$model <- factor(graph$model, levels=c("sup", "hac"))
ggplot(graph, aes(gene_symbol, count, fill = model)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.5, position = "dodge") +
theme_classic(base_size = 22) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
theme_classic(base_size = 22) +
theme(axis.text.x = element_text(angle = 50, hjust = 1))
ggsave("C:\Users\G02.047\Documents\Methylation project\img\tRNAs_hac_sup_model_081024.jpg", width = 15, height = 10)
install.packages("IRkernel")
IRkernel::installspec()
library(tidyverse)
install.packages("tidyverse")
df = data.frame(nrow = 10, ncol = 3)
df(colnames) = c("Sample", "Treatment", "Growth")
colnames(df) = c("Sample", "Treatment", "Growth")
df
df = data.frame(nrows = 10, ncols = 3)
df
df = data.frame(matrix(nrow = 10, ncol = 3))
df
df = data.frame(matrix(nrow = 10, ncol = 3), colnames = c("Sample", "Treatment", "Growth"))
df
df = data.frame(matrix(nrow = 10, ncol = 3))
df
colnames(df = c("Sample", "Treatment", "Growth"))
df
colnames(df) = c("Sample", "Treatment", "Growth"))
colnames(df) = c("Sample", "Treatment", "Growth")
df
df[1:10, "Sample"] = 1:10
df
df[1:5, "Treatment"] = "A"
df[6:10, "Treatment"] = "B"
df
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.7, 1.3,1.2, 0.8, 0.5, 1.1, 0.7, 1.2)
df
df[11:15, "Sample"] = 11:15
df[11:15, "Treatment"] = "C"
install.packages("tidyverse")
install.packages("ggthemes")
install.packages("multcompView")
library(tidyverse)
library(ggthemes)
library(multcompView)
library(tidyverse)
library(ggthemes)
library(multcompView)
library(ggplot2)
#make an example df
df = data.frame(matrix(nrow = 10, ncol = 3))
colnames(df) = c("Sample", "Treatment", "Growth")
df[1:15, "Sample"] = 1:15
df[1:5, "Treatment"] = "A"
df[6:10, "Treatment"] = "B"
df[11:15, "Treatment"] = "C"
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.7, 1.3,1.2, 0.8, 0.5, 1.1, 0.7, 1.2)
df
#make an output df for graphing with summary statistics
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.9, 1.3,1.2, 0.8, 0.5, 1.1, 0.7, 1.2)
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
#run analysis of variance
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.6, 1.3,1.2, 0.8, 0.5, 1.1, 0.7, 1.2)
#make an output df for graphing with summary statistics
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
#run analysis of variance
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.7, 1.3,1.2, 0.8, 0.5, 0.9, 0.7, 1.2)
df
#make an output df for graphing with summary statistics
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
#run analysis of variance
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.7, 1.3,1.2, 0.8, 0.5, 0.6, 0.7, 1.2)
df
#make an output df for graphing with summary statistics
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
#run analysis of variance
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
ggplot(output, aes(Treatment, Average)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Average-StDev, ymax=Average+StDev), width = 0.2) +
geom_text(aes(label = significance, y = Average + StDev), vjust = -0.5, size = 6) +
theme_classic(base_size = 22)
#make an example df with growth values for 15 samples from three treatment groups
df = data.frame(matrix(nrow = 10, ncol = 3))
colnames(df) = c("Sample", "Treatment", "Growth")
df[1:15, "Sample"] = 1:15
df[1:5, "Treatment"] = "A"
df[6:10, "Treatment"] = "B"
df[11:15, "Treatment"] = "C"
df[1:15, "Growth"] = c(0.6, 0.2, 0.4, 0.3, 0.2, 1.1, 1.5, 0.7, 1.3,1.2, 0.8, 0.5, 0.6, 0.7, 1.2)
df
#make an output df for graphing with summary statistics
output = group_by(df, Treatment) %>%
summarise(Average=mean(Growth), StDev = sd(Growth)) %>%
arrange(desc(Average))
output
#run analysis of variance
anova = aov(Growth ~ Treatment, data = df)
#posthoc with Tukey's
tukey = TukeyHSD(anova)
#get significance letters
letters = multcompLetters4(anova, tukey)
cld = as.data.frame.list(letters$Treatment)
#add significance letters to the df for graphing
output$significance = cld$Letters
output
#graph it
ggplot(output, aes(Treatment, Average)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Average-StDev, ymax=Average+StDev), width = 0.2) +
geom_text(aes(label = significance, y = Average + StDev), vjust = -0.5, size = 6) +
theme_classic(base_size = 22)
ggplot(output, aes(Treatment, Average)) +
geom_bar(stat = "identity", alpha = 0.5, color = "black", linewidth = 0.5) +
geom_errorbar(aes(ymin = Average-StDev, ymax=Average+StDev), width = 0.2) +
geom_text(aes(label = significance, y = Average + StDev), vjust = -0.5, size = 6) +
theme_classic(base_size = 22)
library(reshape2)
library(reshape2)
library(ggplot2)
library(dplyr)
library(stringi)
library(scales)
clariostar_load <- function(path, measurements, mapping_file, excel_range) {
mapping <- read.delim(paste(path, mapping_file, sep = ''))
od <- readxl::read_excel(paste(path, measurements, sep = ''), range = excel_range)
od <- od[-1,]
print(od[,1][[1]][2])
od$time <- c(seq(0, ((nrow(od) -1) * 15), 15))
od$Well <- NULL
od <- od[,-1]
od <- melt(od, id.vars = 'time')
colnames(od) <- c('time', 'well', 'value')
od$replicate <- mapping$replicate[match(od$well, mapping$well)]
od$strain <- mapping$sample[match(od$well, mapping$well)]
od$type <- mapping$type[match(od$well, mapping$well)]
od$media <- mapping$media[match(od$well, mapping$well)]
od$value <- as.numeric(od$value)
return(od)
}
tecan_load <- function(path, measurements, mapping_file, excel_range) {
mapping <- read.delim(paste(path, mapping_file, sep = ''))
mapping$well <- gsub('([[:alpha:]])0', '\\1', mapping$well) #A01 vs A1
od <- readxl::read_excel(paste(path, measurements, sep = ''), range = excel_range)
time <- od[1,]
time <- as.data.frame(t(time))
od <- od[-c(1:2),]
colnames(od)[1] <- "well"
od <- melt(od, id.vars = "well")
colnames(od) <- c('well', 'cycle', 'value')
od$time <- time$V1[match(od$cycle, row.names(time))]
od$time <- as.numeric(od$time)
od$replicate <- mapping$replicate[match(od$well, mapping$well)]
od$strain <- mapping$sample[match(od$well, mapping$well)]
od$type <- mapping$type[match(od$well, mapping$well)]
od$media <- mapping$media[match(od$well, mapping$well)]
od$pbad33 <- mapping$pbad33[match(od$well, mapping$well)]
od$pbad24 <- mapping$pbad24[match(od$well, mapping$well)]
od$value <- as.numeric(od$value)
return(od)
}
pan <- na.omit(tecan_load(path = '/Users/tessbrewer/Documents/munich/native_cloning/pan265/',
mapping_file = 'mapping_pan265_13.05.txt',
measurements = 'efp1_epmA_13.05.24.xlsx',
excel_range = 'A34:DQ132'))
pan <- na.omit(tecan_load(path = "~/GitHub/R_Workshop/Growth_curves/tess_example",
mapping_file = 'mapping_pan265_13.05.txt',
measurements = 'efp1_epmA_13.05.24.xlsx',
excel_range = 'A34:DQ132'))
pan <- na.omit(tecan_load(path = "~/GitHub/R_Workshop/Growth_curves/tess_example/",
mapping_file = 'mapping_pan265_13.05.txt',
measurements = 'efp1_epmA_13.05.24.xlsx',
excel_range = 'A34:DQ132'))
aggregate(value ~ media, data = subset(pan, type == 'blank'), mean)
mean_blank <- mean(as.numeric(subset(pan, type == 'blank')$value))
pan$blank_corrected_val <- (pan$value - mean_blank)
pan$combination <- paste(pan$pbad33, pan$pbad24, sep = '_')
ggplot(pan, aes(x = time, y = blank_corrected_val)) +
facet_wrap(~combination) +
geom_smooth(aes(group = paste(media, type, replicate), color = media), linewidth = 1.1, se = F) +
# geom_point(aes(color = media), size = 3) +
# geom_errorbar(aes(ymin = blank_corrected_val - se, ymax = blank_corrected_val + se, color = media),
#               width = 0.1) +
xlab("Time (minutes)") +
ylab("Luminescence x 10^3") +
scale_color_brewer(palette = 'Set2', name = 'EFP type') +
scale_y_log10() +
theme_bw() +
# theme(axis.title.y = element_markdown()) +
theme(legend.justification = c(0.025, 0.975), legend.position = c(0.025, 0.975)) +
theme(strip.background = element_blank(), strip.text = element_text(family="Avenir", size=24, color = "#666666")) +
theme(text = element_text(family="Avenir", size=16, color = "#666666")) +
theme(axis.text = element_text(family="Avenir", size=24, color = "#666666"), axis.title = element_text(family="Avenir", size=24, color = "#666666"))
# theme(legend.text = element_markdown())
View(pan)
install.packages("rmarkdown")
install.packages("Rtools")
install.packages("Rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
setwd("~/GitHub/R_Workshop/Basic_graphing")
knitr::opts_chunk$set(echo = TRUE)
df = read.delim("data/sample_lfq_values1.txt", sep = "\t", header = 1)
df = read.delim("/data/sample_lfq_values1.txt", sep = "\t", header = 1)
setwd("~/GitHub/R_Workshop/Basic_graphing")
list.dirs
list.dirs(".")
df = read.delim("./data/sample_lfq_values1.txt", sep = "\t", header = 1)
list.dirs("./data")
list.dirs("./data/")
df = read.delim("/data/sample_lfq_values1.txt", sep = "\t", header = 1)
df = read.delim("sample_lfq_values1.txt", sep = "\t", header = 1)
ls
pwd
pwd()
getwd()
list.files()
list.files("data")
df = read.delim("data/sample_lfq_values1.txt", sep = "\t", header = 1)
df = read.delim("data/sample_lfq_values1.txt", sep = "\t", header = 1)
setwd("C:/Users/G02.047/Documents/GitHub/R_Workshop/Basic_graphing")
df = read.delim("data/sample_lfq_values1.txt", sep = "\t", header = 1)
df
setwd("C:/Users/G02.047/Documents/GitHub/R_Workshop/Basic_graphing")
df = read.delim("data/sample_lfq_values1.txt", sep = "\t", header = 1)
df
ggplot(data = df, aes(x = Timepoint, y = Expression)) +
geom_point()
library(ggplot2)
ggplot(data = df, aes(x = Timepoint, y = Expression)) +
geom_point()
ggplot(data = df, aes(x = Timepoint, y = Expression)) +
geom_point() +
theme_classic(base_size = 22)
ggplot(data = df, aes(x = Timepoint, y = Expression)) +
geom_point() +
theme_classic(base_size = 22) +
xlab("Time (min)") +
ylab("Expression (lfq)")
